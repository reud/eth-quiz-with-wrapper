/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AnswerInterface extends ethers.utils.Interface {
  functions: {
    "block_number()": FunctionFragment;
    "h()": FunctionFragment;
    "last_completed_migration()": FunctionFragment;
    "owner()": FunctionFragment;
    "p()": FunctionFragment;
    "q()": FunctionFragment;
    "question_id()": FunctionFragment;
    "solver()": FunctionFragment;
    "status()": FunctionFragment;
    "t()": FunctionFragment;
    "y()": FunctionFragment;
    "modExp(uint256,uint256,uint256)": FunctionFragment;
    "verify(uint256)": FunctionFragment;
    "getAnswerStatus()": FunctionFragment;
    "setCompleted(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "block_number",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "h", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "last_completed_migration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "p", values?: undefined): string;
  encodeFunctionData(functionFragment: "q", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "question_id",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "solver", values?: undefined): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(functionFragment: "t", values?: undefined): string;
  encodeFunctionData(functionFragment: "y", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "modExp",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAnswerStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCompleted",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "block_number",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "h", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "last_completed_migration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "p", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "q", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "question_id",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "solver", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "t", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "y", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "modExp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAnswerStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCompleted",
    data: BytesLike
  ): Result;

  events: {
    "result(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "result"): EventFragment;
}

export class Answer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AnswerInterface;

  functions: {
    block_number(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "block_number()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    h(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "h()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    last_completed_migration(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "last_completed_migration()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    p(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "p()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    q(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "q()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    question_id(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "question_id()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    solver(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "solver()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    status(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "status()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    t(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "t()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    y(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "y()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    modExp(
      base: BigNumberish,
      exp: BigNumberish,
      mod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      ret: BigNumber;
      0: BigNumber;
    }>;

    "modExp(uint256,uint256,uint256)"(
      base: BigNumberish,
      exp: BigNumberish,
      mod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      ret: BigNumber;
      0: BigNumber;
    }>;

    verify(
      s: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "verify(uint256)"(
      s: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAnswerStatus(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getAnswerStatus()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    setCompleted(
      completed: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCompleted(uint256)"(
      completed: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  block_number(overrides?: CallOverrides): Promise<BigNumber>;

  "block_number()"(overrides?: CallOverrides): Promise<BigNumber>;

  h(overrides?: CallOverrides): Promise<BigNumber>;

  "h()"(overrides?: CallOverrides): Promise<BigNumber>;

  last_completed_migration(overrides?: CallOverrides): Promise<BigNumber>;

  "last_completed_migration()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  p(overrides?: CallOverrides): Promise<BigNumber>;

  "p()"(overrides?: CallOverrides): Promise<BigNumber>;

  q(overrides?: CallOverrides): Promise<BigNumber>;

  "q()"(overrides?: CallOverrides): Promise<BigNumber>;

  question_id(overrides?: CallOverrides): Promise<BigNumber>;

  "question_id()"(overrides?: CallOverrides): Promise<BigNumber>;

  solver(overrides?: CallOverrides): Promise<string>;

  "solver()"(overrides?: CallOverrides): Promise<string>;

  status(overrides?: CallOverrides): Promise<number>;

  "status()"(overrides?: CallOverrides): Promise<number>;

  t(overrides?: CallOverrides): Promise<BigNumber>;

  "t()"(overrides?: CallOverrides): Promise<BigNumber>;

  y(overrides?: CallOverrides): Promise<BigNumber>;

  "y()"(overrides?: CallOverrides): Promise<BigNumber>;

  modExp(
    base: BigNumberish,
    exp: BigNumberish,
    mod: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "modExp(uint256,uint256,uint256)"(
    base: BigNumberish,
    exp: BigNumberish,
    mod: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  verify(s: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  "verify(uint256)"(
    s: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAnswerStatus(overrides?: CallOverrides): Promise<BigNumber>;

  "getAnswerStatus()"(overrides?: CallOverrides): Promise<BigNumber>;

  setCompleted(
    completed: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCompleted(uint256)"(
    completed: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    block_number(overrides?: CallOverrides): Promise<BigNumber>;

    "block_number()"(overrides?: CallOverrides): Promise<BigNumber>;

    h(overrides?: CallOverrides): Promise<BigNumber>;

    "h()"(overrides?: CallOverrides): Promise<BigNumber>;

    last_completed_migration(overrides?: CallOverrides): Promise<BigNumber>;

    "last_completed_migration()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    p(overrides?: CallOverrides): Promise<BigNumber>;

    "p()"(overrides?: CallOverrides): Promise<BigNumber>;

    q(overrides?: CallOverrides): Promise<BigNumber>;

    "q()"(overrides?: CallOverrides): Promise<BigNumber>;

    question_id(overrides?: CallOverrides): Promise<BigNumber>;

    "question_id()"(overrides?: CallOverrides): Promise<BigNumber>;

    solver(overrides?: CallOverrides): Promise<string>;

    "solver()"(overrides?: CallOverrides): Promise<string>;

    status(overrides?: CallOverrides): Promise<number>;

    "status()"(overrides?: CallOverrides): Promise<number>;

    t(overrides?: CallOverrides): Promise<BigNumber>;

    "t()"(overrides?: CallOverrides): Promise<BigNumber>;

    y(overrides?: CallOverrides): Promise<BigNumber>;

    "y()"(overrides?: CallOverrides): Promise<BigNumber>;

    modExp(
      base: BigNumberish,
      exp: BigNumberish,
      mod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "modExp(uint256,uint256,uint256)"(
      base: BigNumberish,
      exp: BigNumberish,
      mod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify(s: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "verify(uint256)"(
      s: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAnswerStatus(overrides?: CallOverrides): Promise<BigNumber>;

    "getAnswerStatus()"(overrides?: CallOverrides): Promise<BigNumber>;

    setCompleted(
      completed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCompleted(uint256)"(
      completed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    result(answerer: null, is_correct: null): EventFilter;
  };

  estimateGas: {
    block_number(overrides?: CallOverrides): Promise<BigNumber>;

    "block_number()"(overrides?: CallOverrides): Promise<BigNumber>;

    h(overrides?: CallOverrides): Promise<BigNumber>;

    "h()"(overrides?: CallOverrides): Promise<BigNumber>;

    last_completed_migration(overrides?: CallOverrides): Promise<BigNumber>;

    "last_completed_migration()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    p(overrides?: CallOverrides): Promise<BigNumber>;

    "p()"(overrides?: CallOverrides): Promise<BigNumber>;

    q(overrides?: CallOverrides): Promise<BigNumber>;

    "q()"(overrides?: CallOverrides): Promise<BigNumber>;

    question_id(overrides?: CallOverrides): Promise<BigNumber>;

    "question_id()"(overrides?: CallOverrides): Promise<BigNumber>;

    solver(overrides?: CallOverrides): Promise<BigNumber>;

    "solver()"(overrides?: CallOverrides): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<BigNumber>;

    "status()"(overrides?: CallOverrides): Promise<BigNumber>;

    t(overrides?: CallOverrides): Promise<BigNumber>;

    "t()"(overrides?: CallOverrides): Promise<BigNumber>;

    y(overrides?: CallOverrides): Promise<BigNumber>;

    "y()"(overrides?: CallOverrides): Promise<BigNumber>;

    modExp(
      base: BigNumberish,
      exp: BigNumberish,
      mod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "modExp(uint256,uint256,uint256)"(
      base: BigNumberish,
      exp: BigNumberish,
      mod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify(s: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "verify(uint256)"(
      s: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAnswerStatus(overrides?: CallOverrides): Promise<BigNumber>;

    "getAnswerStatus()"(overrides?: CallOverrides): Promise<BigNumber>;

    setCompleted(
      completed: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCompleted(uint256)"(
      completed: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    block_number(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "block_number()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    h(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "h()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    last_completed_migration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "last_completed_migration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    p(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "p()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    q(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "q()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    question_id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "question_id()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    solver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "solver()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "status()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    t(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "t()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    y(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "y()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    modExp(
      base: BigNumberish,
      exp: BigNumberish,
      mod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "modExp(uint256,uint256,uint256)"(
      base: BigNumberish,
      exp: BigNumberish,
      mod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify(
      s: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "verify(uint256)"(
      s: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAnswerStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAnswerStatus()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCompleted(
      completed: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCompleted(uint256)"(
      completed: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
