/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ProblemInterface extends ethers.utils.Interface {
  functions: {
    "answers(address)": FunctionFragment;
    "h()": FunctionFragment;
    "master_contract_address()": FunctionFragment;
    "owner()": FunctionFragment;
    "p()": FunctionFragment;
    "problem_statement_hash()": FunctionFragment;
    "q()": FunctionFragment;
    "y()": FunctionFragment;
    "createAnswer(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "answers", values: [string]): string;
  encodeFunctionData(functionFragment: "h", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "master_contract_address",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "p", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "problem_statement_hash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "q", values?: undefined): string;
  encodeFunctionData(functionFragment: "y", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createAnswer",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "answers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "h", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "master_contract_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "p", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "problem_statement_hash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "q", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "y", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAnswer",
    data: BytesLike
  ): Result;

  events: {
    "answerContractCreated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "answerContractCreated"): EventFragment;
}

export class Problem extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ProblemInterface;

  functions: {
    answers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "answers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    h(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "h()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    master_contract_address(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "master_contract_address()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    p(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "p()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    problem_statement_hash(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "problem_statement_hash()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    q(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "q()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    y(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "y()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    createAnswer(
      t: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createAnswer(uint256)"(
      t: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  answers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "answers(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  h(overrides?: CallOverrides): Promise<BigNumber>;

  "h()"(overrides?: CallOverrides): Promise<BigNumber>;

  master_contract_address(overrides?: CallOverrides): Promise<string>;

  "master_contract_address()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  p(overrides?: CallOverrides): Promise<BigNumber>;

  "p()"(overrides?: CallOverrides): Promise<BigNumber>;

  problem_statement_hash(overrides?: CallOverrides): Promise<BigNumber>;

  "problem_statement_hash()"(overrides?: CallOverrides): Promise<BigNumber>;

  q(overrides?: CallOverrides): Promise<BigNumber>;

  "q()"(overrides?: CallOverrides): Promise<BigNumber>;

  y(overrides?: CallOverrides): Promise<BigNumber>;

  "y()"(overrides?: CallOverrides): Promise<BigNumber>;

  createAnswer(
    t: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createAnswer(uint256)"(
    t: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    answers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "answers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    h(overrides?: CallOverrides): Promise<BigNumber>;

    "h()"(overrides?: CallOverrides): Promise<BigNumber>;

    master_contract_address(overrides?: CallOverrides): Promise<string>;

    "master_contract_address()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    p(overrides?: CallOverrides): Promise<BigNumber>;

    "p()"(overrides?: CallOverrides): Promise<BigNumber>;

    problem_statement_hash(overrides?: CallOverrides): Promise<BigNumber>;

    "problem_statement_hash()"(overrides?: CallOverrides): Promise<BigNumber>;

    q(overrides?: CallOverrides): Promise<BigNumber>;

    "q()"(overrides?: CallOverrides): Promise<BigNumber>;

    y(overrides?: CallOverrides): Promise<BigNumber>;

    "y()"(overrides?: CallOverrides): Promise<BigNumber>;

    createAnswer(t: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "createAnswer(uint256)"(
      t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    answerContractCreated(
      contract_address: null,
      created_by: null
    ): EventFilter;
  };

  estimateGas: {
    answers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "answers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    h(overrides?: CallOverrides): Promise<BigNumber>;

    "h()"(overrides?: CallOverrides): Promise<BigNumber>;

    master_contract_address(overrides?: CallOverrides): Promise<BigNumber>;

    "master_contract_address()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    p(overrides?: CallOverrides): Promise<BigNumber>;

    "p()"(overrides?: CallOverrides): Promise<BigNumber>;

    problem_statement_hash(overrides?: CallOverrides): Promise<BigNumber>;

    "problem_statement_hash()"(overrides?: CallOverrides): Promise<BigNumber>;

    q(overrides?: CallOverrides): Promise<BigNumber>;

    "q()"(overrides?: CallOverrides): Promise<BigNumber>;

    y(overrides?: CallOverrides): Promise<BigNumber>;

    "y()"(overrides?: CallOverrides): Promise<BigNumber>;

    createAnswer(t: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "createAnswer(uint256)"(
      t: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    answers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "answers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    h(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "h()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    master_contract_address(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "master_contract_address()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    p(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "p()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    problem_statement_hash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "problem_statement_hash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    q(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "q()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    y(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "y()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createAnswer(
      t: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createAnswer(uint256)"(
      t: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
