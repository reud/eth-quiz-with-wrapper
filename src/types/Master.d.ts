/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MasterInterface extends ethers.utils.Interface {
  functions: {
    "p()": FunctionFragment;
    "problems(address)": FunctionFragment;
    "q()": FunctionFragment;
    "getAnswerCount(address,address)": FunctionFragment;
    "selectAnswerRecords(address,address)": FunctionFragment;
    "createProblem(uint256,uint256,uint256)": FunctionFragment;
    "setAnswerRecord(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "p", values?: undefined): string;
  encodeFunctionData(functionFragment: "problems", values: [string]): string;
  encodeFunctionData(functionFragment: "q", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAnswerCount",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "selectAnswerRecords",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createProblem",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAnswerRecord",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "p", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "problems", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "q", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAnswerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectAnswerRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProblem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAnswerRecord",
    data: BytesLike
  ): Result;

  events: {
    "problemContractCreated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "problemContractCreated"): EventFragment;
}

export class Master extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MasterInterface;

  functions: {
    p(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "p()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    problems(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "problems(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    q(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "q()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getAnswerCount(
      problem_contract_address: string,
      solver_address: string,
      overrides?: CallOverrides
    ): Promise<{
      count: BigNumber;
      0: BigNumber;
    }>;

    "getAnswerCount(address,address)"(
      problem_contract_address: string,
      solver_address: string,
      overrides?: CallOverrides
    ): Promise<{
      count: BigNumber;
      0: BigNumber;
    }>;

    selectAnswerRecords(
      problem_contract_address: string,
      solver_address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "selectAnswerRecords(address,address)"(
      problem_contract_address: string,
      solver_address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    createProblem(
      problem_statement_hash: BigNumberish,
      y: BigNumberish,
      h: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createProblem(uint256,uint256,uint256)"(
      problem_statement_hash: BigNumberish,
      y: BigNumberish,
      h: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAnswerRecord(
      problem_contract_address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAnswerRecord(address)"(
      problem_contract_address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  p(overrides?: CallOverrides): Promise<BigNumber>;

  "p()"(overrides?: CallOverrides): Promise<BigNumber>;

  problems(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "problems(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  q(overrides?: CallOverrides): Promise<BigNumber>;

  "q()"(overrides?: CallOverrides): Promise<BigNumber>;

  getAnswerCount(
    problem_contract_address: string,
    solver_address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAnswerCount(address,address)"(
    problem_contract_address: string,
    solver_address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  selectAnswerRecords(
    problem_contract_address: string,
    solver_address: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "selectAnswerRecords(address,address)"(
    problem_contract_address: string,
    solver_address: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  createProblem(
    problem_statement_hash: BigNumberish,
    y: BigNumberish,
    h: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createProblem(uint256,uint256,uint256)"(
    problem_statement_hash: BigNumberish,
    y: BigNumberish,
    h: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAnswerRecord(
    problem_contract_address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAnswerRecord(address)"(
    problem_contract_address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    p(overrides?: CallOverrides): Promise<BigNumber>;

    "p()"(overrides?: CallOverrides): Promise<BigNumber>;

    problems(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "problems(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    q(overrides?: CallOverrides): Promise<BigNumber>;

    "q()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAnswerCount(
      problem_contract_address: string,
      solver_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAnswerCount(address,address)"(
      problem_contract_address: string,
      solver_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    selectAnswerRecords(
      problem_contract_address: string,
      solver_address: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "selectAnswerRecords(address,address)"(
      problem_contract_address: string,
      solver_address: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    createProblem(
      problem_statement_hash: BigNumberish,
      y: BigNumberish,
      h: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createProblem(uint256,uint256,uint256)"(
      problem_statement_hash: BigNumberish,
      y: BigNumberish,
      h: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAnswerRecord(
      problem_contract_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAnswerRecord(address)"(
      problem_contract_address: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    problemContractCreated(
      contract_address: null,
      created_by: null
    ): EventFilter;
  };

  estimateGas: {
    p(overrides?: CallOverrides): Promise<BigNumber>;

    "p()"(overrides?: CallOverrides): Promise<BigNumber>;

    problems(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "problems(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    q(overrides?: CallOverrides): Promise<BigNumber>;

    "q()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAnswerCount(
      problem_contract_address: string,
      solver_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAnswerCount(address,address)"(
      problem_contract_address: string,
      solver_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    selectAnswerRecords(
      problem_contract_address: string,
      solver_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "selectAnswerRecords(address,address)"(
      problem_contract_address: string,
      solver_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createProblem(
      problem_statement_hash: BigNumberish,
      y: BigNumberish,
      h: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createProblem(uint256,uint256,uint256)"(
      problem_statement_hash: BigNumberish,
      y: BigNumberish,
      h: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAnswerRecord(
      problem_contract_address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAnswerRecord(address)"(
      problem_contract_address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    p(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "p()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    problems(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "problems(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    q(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "q()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAnswerCount(
      problem_contract_address: string,
      solver_address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAnswerCount(address,address)"(
      problem_contract_address: string,
      solver_address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    selectAnswerRecords(
      problem_contract_address: string,
      solver_address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "selectAnswerRecords(address,address)"(
      problem_contract_address: string,
      solver_address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createProblem(
      problem_statement_hash: BigNumberish,
      y: BigNumberish,
      h: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createProblem(uint256,uint256,uint256)"(
      problem_statement_hash: BigNumberish,
      y: BigNumberish,
      h: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAnswerRecord(
      problem_contract_address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAnswerRecord(address)"(
      problem_contract_address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
